import html5Logo from './Assets/images/HTML5Logo.png'
import cssLogo from './Assets/images/csslogo.png'
import jQueryLogo from './Assets/images/jquerylogo.png'
import JavaScriptLogo from './Assets/images/js-logo.png'
import reactJSLogo from './Assets/images/reactjslogo.png'
import reduxLogo from './Assets/images/reduxlogo.png'
import gitLogo from './Assets/images/gitlogo.png'
import FirebaseLogo from './Assets/images/firebase_logo.webp'
import sassLogo from './Assets/images/sasslogo.webp'
import BootstrapLogo from './Assets/images/bootstraplogo.webp'
import muiLogo from './Assets/images/muilogo.webp'

const skills = [
    {
        id:1,
        name:'HTML5', 
        describe:`<div><p>HTML (Hypertext Markup Language) is the standard markup language used for creating web pages and applications. It is the backbone of the World Wide Web, providing the structure and content of a webpage. HTML uses a series of tags and elements to define the structure and format of the content displayed in a web browser.</p><p>An HTML document is composed of nested elements, forming a hierarchical structure. The basic structure of an HTML document typically includes the following elements:</p><ol><li><p><code>&lt;!DOCTYPE&gt;</code>: This is the declaration at the beginning of an HTML document that specifies the version of HTML being used. For example, <code>&lt;!DOCTYPE html&gt;</code> indicates the use of HTML5.</p></li><li><p><code>&lt;html&gt;</code>: This is the root element of an HTML document and serves as the container for all other elements.</p></li><li><p><code>&lt;head&gt;</code>: This element contains meta-information about the document, such as the page title, character encoding, and linked stylesheets or scripts.</p></li><li><p><code>&lt;body&gt;</code>: This element encapsulates the visible content of the webpage, including text, images, links, and other elements.</p></li></ol><p>Within the <code>&lt;body&gt;</code> element, you can use various tags to structure and format the content, such as:</p><ul><li><code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>: Heading tags that define different levels of headings.</li><li><code>&lt;p&gt;</code>: Paragraph tag used for text paragraphs.</li><li><code>&lt;a&gt;</code>: Anchor tag used for creating hyperlinks to other web pages or resources.</li><li><code>&lt;img&gt;</code>: Image tag used to display images on the webpage.</li><li><code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code>: Unordered list and list item tags used to create bulleted lists.</li><li><code>&lt;ol&gt;</code> and <code>&lt;li&gt;</code>: Ordered list and list item tags used to create numbered lists.</li><li><code>&lt;div&gt;</code>: Division tag used to group and style content blocks.</li><li><code>&lt;span&gt;</code>: Inline element used for styling or selecting specific parts of text.</li></ul><p>These are just a few examples of HTML tags. There are many more available to structure and format content as needed.</p><p>Additionally, HTML supports the use of attributes within tags to provide additional information or control behavior. For example, the <code>src</code> attribute in an <code>&lt;img&gt;</code> tag specifies the image source, and the <code>href</code> attribute in an <code>&lt;a&gt;</code> tag defines the target URL.</p><p>By combining these tags and attributes, you can create a well-structured and visually appealing webpage using HTML.</p></div>`, 
        describeoneline:"HTML is the standard markup language for creating web pages",
        image:html5Logo, 
       
    },
    {
        id:2,
        name:'CSS3', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>CSS (Cascading Style Sheets) is a styling language used to describe the visual presentation of a document written in HTML or XML. It provides a way to control the layout, appearance, and formatting of web pages. CSS works by associating styles with HTML elements, allowing developers to define how elements should be displayed on the screen or printed.</p><p>CSS operates on a rule-based system, where each rule consists of a selector and a set of declarations. The selector identifies the HTML element(s) to which the styles should be applied, and the declarations specify the specific styles to be applied.</p><p>CSS offers a wide range of styling capabilities, including:</p><ol><li><p>Colors and Backgrounds: CSS allows you to define the colors of text, backgrounds, borders, and other elements using named colors, hexadecimal values, RGB or HSL values, and even gradient backgrounds.</p></li><li><p>Typography: You can control the font family, size, weight, style, and other properties of text elements using CSS. This includes adjusting line spacing, text alignment, indentation, and text decorations.</p></li><li><p>Layout and Positioning: CSS provides mechanisms to control the layout and positioning of elements on the page. This includes setting dimensions (width and height), controlling margins and paddings, and positioning elements relative to the document or other elements using techniques like floats, flexbox, or CSS Grid.</p></li><li><p>Box Model: CSS allows you to control the size, spacing, and behavior of elements using the box model. The box model comprises the content area, padding, borders, and margins of an element, and CSS provides properties to manipulate each aspect.</p></li><li><p>Transitions and Animations: CSS supports creating smooth transitions and animations between different states of an element. This includes properties like transition, transform, and keyframe animations, which allow for dynamic and interactive user experiences.</p></li><li><p>Responsive Design: CSS facilitates the creation of responsive websites that adapt to different screen sizes and devices. Media queries allow you to define different styles based on factors like screen width, enabling you to create layouts optimized for mobile, tablet, and desktop devices.</p></li></ol><p>CSS can be included directly within an HTML document using the <code>&lt;style&gt;</code> tag or stored in separate CSS files and linked to HTML documents using the <code>&lt;link&gt;</code> tag. By separating the presentation layer (CSS) from the content layer (HTML), CSS promotes clean and maintainable code and allows for consistent styling across multiple web pages.</p><p>Overall, CSS is a fundamental technology in web development, enabling developers to control the appearance and layout of web pages and create visually appealing and user-friendly websites.</p></div>`, 
        image:cssLogo,
        describeoneline:"CSS (Cascading Style Sheets) is a styling language used to describe the visual",
    },
    {
        id:3,
        name:'jQuery', 
        image:jQueryLogo, 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>jQuery is a fast, lightweight, and feature-rich JavaScript library that simplifies the process of manipulating HTML documents, handling events, creating animations, and interacting with the server. It provides an easy-to-use and concise syntax that allows developers to write code more efficiently and achieve common web development tasks with less effort.</p><p>With jQuery, you can perform a variety of operations, including:</p><ol><li><p>DOM Manipulation: jQuery simplifies the process of selecting and manipulating HTML elements in the Document Object Model (DOM). You can easily select elements based on their tags, classes, IDs, or other attributes, and modify their content, styles, or attributes.</p></li><li><p>Event Handling: jQuery makes it straightforward to handle events such as clicks, mouse movements, keypresses, and form submissions. You can attach event handlers to HTML elements and specify the actions to be performed when an event occurs.</p></li><li><p>AJAX and Server Communication: jQuery provides convenient methods for making asynchronous HTTP requests and communicating with a server. You can easily retrieve data from the server, send data to the server, and update the web page dynamically without requiring a full page refresh.</p></li><li><p>Animation and Effects: jQuery simplifies the creation of animations and visual effects on web pages. You can easily add fade-ins, slide-outs, or custom animations to enhance the user experience and make the web page more interactive.</p></li><li><p>DOM Traversal and Manipulation: jQuery allows you to traverse the DOM hierarchy, accessing parent, child, or sibling elements. You can find elements based on their relationship to other elements and modify the structure of the DOM dynamically.</p></li><li><p>Plugin Integration: jQuery has a vast ecosystem of plugins developed by the community, offering additional functionality and features. These plugins cover a wide range of areas such as image sliders, form validation, date pickers, and more. They can be easily integrated into your jQuery-based projects.</p></li></ol><p>jQuery simplifies cross-browser compatibility by abstracting away many of the differences between various web browsers, ensuring consistent behavior across different environments.</p><p>To use jQuery, you include the jQuery library in your HTML document using a <code>&lt;script&gt;</code> tag, either by downloading and hosting the library or by referencing a content delivery network (CDN). Once included, you can use jQuery methods and functions by writing JavaScript code within <code>&lt;script&gt;</code> tags or in external JavaScript files.</p><p>Overall, jQuery is a powerful and popular JavaScript library that streamlines web development tasks, making it easier to create dynamic, interactive, and cross-browser compatible web pages.</p></div>`,
        describeoneline:"jQuery is a fast, lightweight, and feature-rich JavaScript library"
    },
    {
        id:4,
        name:'JavaScript', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>JavaScript is a versatile and widely-used programming language that is primarily used for web development. It is a client-side scripting language, meaning it runs directly in the web browser of a user, enabling interactivity and dynamic behavior on web pages.</p><p>JavaScript is known for its ability to manipulate and modify the content and appearance of web pages in real-time. It provides powerful features that allow developers to create interactive elements, handle user events, and dynamically update the content on a web page without requiring a full reload.</p><p>Here are some key aspects and features of JavaScript:</p><ol><li><p>Syntax: JavaScript has a syntax similar to other programming languages like C, making it relatively easy to learn and understand. It uses variables, data types, operators, functions, and control structures such as loops and conditionals.</p></li><li><p>Object-Oriented Programming: JavaScript supports object-oriented programming (OOP) principles. It allows developers to create objects and define their properties and methods. This approach promotes code reusability and modularity.</p></li><li><p>DOM Manipulation: JavaScript provides APIs (Application Programming Interfaces) to interact with the Document Object Model (DOM) of a web page. This allows developers to access and manipulate the elements and content on a web page, such as changing text, modifying styles, or adding/removing elements.</p></li><li><p>Event Handling: JavaScript enables the handling of user events, such as clicks, mouse movements, and keyboard input. Developers can attach event listeners to elements and define actions or functions to be executed when a specific event occurs.</p></li><li><p>Asynchronous Programming: JavaScript supports asynchronous programming through the use of callbacks, promises, and async/await. This allows for non-blocking code execution, making it possible to perform tasks like making AJAX requests or loading external resources without blocking the main execution thread.</p></li><li><p>Web APIs: JavaScript provides access to a wide range of Web APIs, such as the Geolocation API, Canvas API, Web Storage API, and many others. These APIs offer additional capabilities for working with user location, drawing graphics, storing data, and more.</p></li><li><p>Cross-Platform Development: JavaScript is not limited to web browsers. It can be used to develop applications on various platforms, including mobile apps (using frameworks like React Native or Ionic) and desktop apps (using frameworks like Electron).</p></li></ol><p>JavaScript is supported by all modern web browsers, making it a universal language for web development. It plays a crucial role in creating dynamic and interactive web applications, from simple form validations to complex single-page applications (SPAs).</p><p>In addition to web development, JavaScript is now used in a variety of other areas, such as server-side development (Node.js), game development, IoT (Internet of Things), and machine learning, to name a few.</p><p>Overall, JavaScript is a powerful and flexible language that empowers developers to create engaging and interactive web experiences.</p></div>`, 
        image:JavaScriptLogo,
        describeoneline:"JavaScript is a versatile and widely-used programming language"
    },
    {
        id:5,
        name:'ReactJs', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>React.js is a popular JavaScript library used for building user interfaces and developing robust, scalable web applications. It was created by Facebook and has gained significant traction in the web development community.</p><p>React.js follows a component-based architecture, where the user interface is divided into independent and reusable components. Each component encapsulates its own logic and can be composed together to form complex UIs. This approach promotes code reusability, modularity, and easier maintenance.</p><p>Key features and concepts of React.js include:</p><ol><li><p>Virtual DOM: React.js uses a virtual representation of the HTML Document Object Model (DOM) called the Virtual DOM. Instead of directly manipulating the actual DOM, React creates a virtual representation of the UI in memory and efficiently updates only the necessary parts of the DOM when there are changes. This results in improved performance and faster rendering.</p></li><li><p>JSX Syntax: React.js introduces JSX (JavaScript XML), a syntax extension that allows developers to write HTML-like code within JavaScript. JSX simplifies the process of defining and rendering components, making the code more readable and maintainable.</p></li><li><p>State and Props: React components can have their own internal state, allowing them to manage and track data that changes over time. Components can also receive data from their parent components via props (short for properties). The combination of state and props enables the building of dynamic and interactive UIs.</p></li><li><p>Component Lifecycle: React provides lifecycle methods that allow developers to execute code at specific stages of a component's lifecycle, such as when it is created, updated, or removed from the DOM. These lifecycle methods enable developers to control component behavior and perform tasks like fetching data, updating the UI, or cleaning up resources.</p></li><li><p>Reactive Updates: When the state or props of a component change, React automatically triggers a re-rendering of the affected components and their child components. This reactive updating approach ensures that the UI stays in sync with the underlying data.</p></li><li><p>Unidirectional Data Flow: React follows a unidirectional data flow, also known as one-way binding. Data flows from parent components to child components through props, and any changes to the data are communicated via callbacks. This helps in maintaining predictable data flow and making the application easier to understand and debug.</p></li></ol><p>React.js is often used in conjunction with other libraries or frameworks, such as React Router for handling client-side routing or Redux for managing application state. The extensive React ecosystem provides numerous additional libraries, tools, and community resources to enhance development productivity.</p><p>Overall, React.js provides a powerful and efficient way to build user interfaces with reusable components, high performance, and maintainable code. It has become a popular choice for creating modern web applications and is widely adopted by developers and organizations around the world.</p></div>`, 
        image:reactJSLogo,
        describeoneline:"React.js is a popular JavaScript library used for building user interfaces"
    },
    {
        id:6,
        name:'ReduxLogo', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>Redux is a state management library for JavaScript applications, commonly used in conjunction with frameworks like React. It provides a predictable and centralized way to manage the application state, making it easier to develop complex and scalable applications.</p><p>The key concepts of Redux include:</p><ol><li><p>Store: The central component of Redux is the store, which holds the complete state tree of the application. The state represents the data and the current state of the application. The store is responsible for managing the state and providing methods to access, update, and subscribe to changes in the state.</p></li><li><p>Actions: Actions are plain JavaScript objects that represent an intention to change the state. They contain a type field that describes the type of action being performed, along with any additional data required to perform the action. Actions are dispatched to the store to initiate state changes.</p></li><li><p>Reducers: Reducers are pure functions that take the current state and an action as input and return a new state. They specify how the state should be updated in response to an action. Each reducer handles a specific slice of the state tree and combines them to form the overall application state.</p></li><li><p>Dispatch: Dispatching an action is the process of sending an action to the store. When an action is dispatched, the store invokes the reducers, which in turn update the state based on the action. The new state is then propagated to the UI, triggering re-rendering of components that are subscribed to changes.</p></li><li><p>Middleware: Redux allows the use of middleware to extend the capabilities of the store. Middleware sits between the dispatching of an action and the moment it reaches the reducers, allowing developers to apply custom logic, perform asynchronous operations, or add additional functionality to the data flow.</p></li><li><p>Store Subscription: Components can subscribe to the Redux store to receive updates whenever the state changes. This enables components to stay in sync with the state and efficiently update the UI based on the latest data.</p></li></ol><p>Redux follows a unidirectional data flow, where the state is stored in a single source of truth (the store) and changes are made through dispatched actions. This makes it easier to understand and debug application behavior, especially as the complexity of the application grows.</p><p>Redux can be used with any JavaScript framework, but it is commonly used in combination with React, where it integrates seamlessly with React components using the React-Redux library.</p><p>Overall, Redux provides a structured and predictable approach to managing state in JavaScript applications. It helps in maintaining a clear separation of concerns, making code easier to test, maintain, and reason about. Redux has gained popularity due to its simplicity, scalability, and wide adoption within the JavaScript community.</p></div>`, 
        image:reduxLogo, 
        describeoneline:"Redux is a state management library for JavaScript applications"
    },
    {
        id:7,
        name:'Git', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>Git is a distributed version control system that allows developers to track changes to their codebase, collaborate with others, and manage multiple versions of a project efficiently. It is widely used in software development to maintain a history of changes, facilitate teamwork, and enable easy rollback or branching of code.</p><p>Here are some key concepts and features of Git:</p><ol><li><p>Repository: Git operates on repositories, which are essentially directories that contain all the files and history of a project. A repository can be local to your machine or hosted remotely on a Git server.</p></li><li><p>Commit: A commit represents a specific version of the codebase at a given point in time. It captures the changes made to the files, along with a commit message that describes the purpose of the changes. Commits form the history of the project and allow you to track the evolution of the codebase.</p></li><li><p>Branching and Merging: Git allows you to create branches, which are independent lines of development. Branches enable developers to work on different features or bug fixes simultaneously without interfering with each other. Once a branch is ready, it can be merged back into the main branch (usually called the "master" or "main" branch) to incorporate the changes.</p></li><li><p>Remote Repositories and Collaboration: Git supports collaboration by allowing repositories to be hosted remotely. Developers can push their changes to a remote repository and pull changes made by others. This enables seamless collaboration and ensures that everyone has access to the latest version of the codebase.</p></li><li><p>Staging and Committing Changes: Git uses a staging area (also known as the index) to selectively choose which changes to include in the next commit. This gives developers fine-grained control over what changes are committed, allowing for clean and organized commit history.</p></li><li><p>Branching Models: Git supports different branching models, such as the popular Git Flow model, that define how branches are created and merged in a project. These models provide a structured approach to branching and help in managing the development and release process.</p></li><li><p>Version History and Time Travel: Git retains a complete history of all commits, allowing you to easily navigate through different versions of the codebase. You can view the changes made in each commit, revert to previous versions, or compare differences between branches or commits.</p></li></ol><p>Git can be used via the command line interface (CLI) or through various graphical user interfaces (GUI) and integrated development environments (IDEs) that provide Git integration. Popular Git hosting platforms include GitHub, GitLab, and Bitbucket, which provide additional features like issue tracking, code reviews, and collaboration tools.</p><p>Overall, Git provides a robust and efficient way to manage version control in software development projects. Its decentralized nature, branching capabilities, and powerful history tracking make it an essential tool for collaboration and code management.</p></div>`, 
        image:gitLogo,
        describeoneline:"Git is a distributed version control system that allows"
    },
    {
        id:8,
        name:'Firebase', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>Firebase is a comprehensive platform provided by Google that offers a range of services and tools to develop and deploy web and mobile applications quickly. It provides developers with a set of backend services, infrastructure, and SDKs (Software Development Kits) to build and scale applications more efficiently.</p><p>Here are some key features and services offered by Firebase:</p><ol><li><p>Realtime Database: Firebase provides a NoSQL cloud-hosted database that allows developers to store and sync data in real-time across clients. It provides seamless integration with web and mobile applications, enabling real-time updates and synchronization of data across devices.</p></li><li><p>Authentication: Firebase Authentication simplifies the process of user authentication and identity management. It supports various authentication methods like email/password, social logins (such as Google, Facebook, Twitter), and more. Developers can easily authenticate users and manage user sessions, providing a secure and personalized experience.</p></li><li><p>Cloud Firestore: Cloud Firestore is a flexible, scalable, and fully-managed NoSQL document database provided by Firebase. It allows developers to store, sync, and query data for web, mobile, and server applications. Firestore provides real-time updates, offline capabilities, and seamless integration with other Firebase services.</p></li><li><p>Cloud Functions: Firebase allows developers to write and deploy serverless functions, known as Firebase Cloud Functions. These functions can be triggered by various events, such as database changes, authentication events, or HTTP requests. Cloud Functions enable developers to run custom code in response to events without managing infrastructure.</p></li><li><p>Cloud Storage: Firebase provides a secure and scalable cloud storage solution for storing and serving user-generated content, such as images, videos, or other files. It offers client libraries and SDKs to simplify file uploads, downloads, and management, making it easy to integrate with web and mobile applications.</p></li><li><p>Hosting: Firebase Hosting enables developers to deploy web applications quickly and easily. It provides fast and secure static hosting for both web assets (HTML, CSS, JavaScript) and dynamic content. Firebase Hosting also offers features like custom domains, SSL/TLS certificates, and automatic scaling.</p></li><li><p>Cloud Messaging: Firebase Cloud Messaging (FCM) allows developers to send targeted push notifications to users on web and mobile devices. It provides reliable delivery of messages at scale, supporting both automated and user-triggered notifications. FCM also supports topics, device groups, and other advanced messaging features.</p></li><li><p>Analytics and Performance Monitoring: Firebase provides built-in analytics and performance monitoring tools to track user engagement, app usage, and performance metrics. It offers insights into user behavior, helps identify issues, and enables developers to optimize their applications for better performance.</p></li></ol><p>Firebase provides SDKs for various platforms, including JavaScript, iOS, Android, and Unity, making it easy to integrate Firebase services into your applications.</p><p>Overall, Firebase simplifies backend development by providing a comprehensive suite of services for building scalable and feature-rich applications. It eliminates the need for server management and infrastructure setup, allowing developers to focus on delivering high-quality user experiences.</p></div>`, 
        image:FirebaseLogo,
        describeoneline:"Firebase is a comprehensive platform provided by Google that offers a range of services and tools to develop and deploy web and mobile applications quickly"
    },
    {
        id:9,
        name:'Sass', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>Sass (Syntactically Awesome Style Sheets) is a popular preprocessor scripting language that extends the capabilities of CSS (Cascading Style Sheets). It provides additional features and functionalities to make CSS code more modular, maintainable, and efficient.</p><p>Here are some key features and concepts of Sass:</p><ol><li><p>Variables: Sass allows you to define variables to store and reuse values throughout your stylesheets. This makes it easier to update common values like colors, fonts, or sizes in a single place, reducing redundancy and improving code maintenance.</p></li><li><p>Nesting: Sass supports nested selectors, allowing you to write CSS rules within other CSS rules. This helps to organize and structure your code, making it more readable and reducing the need for repetitive typing.</p></li><li><p>Mixins: Mixins are reusable blocks of CSS code that can be included in multiple selectors or rule sets. They enable you to define and reuse complex styles or sets of properties, promoting code reusability and modularity.</p></li><li><p>Functions: Sass provides built-in functions and allows you to create your own custom functions. Functions can be used to perform calculations, manipulate values, or generate dynamic styles based on specific conditions.</p></li><li><p>Partials and Imports: Sass allows you to split your stylesheets into multiple files called partials. Each partial contains a specific set of styles and can be imported into other Sass files. This helps in organizing and managing large codebases, making it easier to maintain and reuse styles across different projects.</p></li><li><p>Control Directives: Sass provides control directives like @if, @for, and @each, which enable conditional logic and iteration in your stylesheets. This allows you to generate styles dynamically based on certain conditions or iterate over collections of values.</p></li><li><p>Extends: The extend feature allows you to share styles between selectors, preventing code duplication. It enables you to create placeholder selectors and extend them in other selectors, inheriting the styles defined in the placeholders.</p></li><li><p>Modular Architecture: With Sass, you can structure your stylesheets using a modular architecture, separating concerns and organizing styles based on components or modules. This improves code organization, reusability, and scalability.</p></li></ol><p>Sass is written in a special syntax that resembles CSS but introduces additional features and capabilities. It needs to be compiled into regular CSS before it can be used in web browsers. There are several tools available to compile Sass, including command-line tools, build systems, task runners, and IDE integrations.</p><p>Overall, Sass provides powerful features to enhance the development of CSS stylesheets, making them more maintainable, modular, and efficient. It is widely used in web development projects to streamline the styling process and improve productivity.</p></div>`, 
        image:sassLogo,
        describeoneline:"Sass (Syntactically Awesome Style Sheets) is a popular preprocessor"
    },
    {
        id:10,
        name:'Bootstrap', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>Bootstrap is a popular open-source front-end framework that simplifies the process of building responsive and mobile-first websites and web applications. It provides a collection of pre-built CSS and JavaScript components, templates, and utilities that can be easily customized and integrated into projects.</p><p>Key features and concepts of Bootstrap include:</p><ol><li><p>Responsive Grid System: Bootstrap uses a responsive grid system that allows developers to create flexible and responsive layouts. The grid system is based on a 12-column layout, making it easy to organize content and adapt it to different screen sizes and devices.</p></li><li><p>CSS Components: Bootstrap provides a wide range of reusable CSS components such as buttons, forms, navigation bars, alerts, modals, carousels, and more. These components are styled and designed to be visually appealing and responsive out of the box, saving development time and effort.</p></li><li><p>Customization: Bootstrap can be easily customized to match the specific design requirements of a project. Developers can modify the default styles, colors, and typography using Sass variables or custom CSS classes. This allows for consistent branding and design across an application.</p></li><li><p>JavaScript Components: Bootstrap includes a set of JavaScript components that enhance the functionality and interactivity of web pages. These components include dropdowns, tooltips, modals, carousels, and more. The JavaScript components are optional and can be selectively used based on project needs.</p></li><li><p>Integration with Other Tools: Bootstrap can be seamlessly integrated with other front-end tools and libraries. It works well with jQuery, allowing developers to leverage jQuery's features and plugins. Additionally, it can be integrated with popular front-end frameworks like React, Angular, or Vue.js, enhancing their capabilities with Bootstrap's responsive components.</p></li><li><p>Community and Documentation: Bootstrap has a large and active community of developers. It offers extensive documentation, tutorials, examples, and resources that help developers get started quickly and troubleshoot common issues. The community also contributes additional themes, templates, and extensions that extend Bootstrap's functionality.</p></li></ol><p>Bootstrap follows a mobile-first approach, ensuring that websites and applications are designed and optimized for mobile devices. It emphasizes responsive design principles, making it easier to create websites that adapt and provide a consistent user experience across different screen sizes and resolutions.</p><p>By using Bootstrap, developers can save time and effort in designing and developing responsive web applications. Its extensive set of components, customizable styles, and robust grid system make it a popular choice for both beginners and experienced developers looking to create modern and visually appealing web interfaces.</p></div>`, 
        image:BootstrapLogo,
        describeoneline:"Bootstrap is a popular open-source front-end framework that simplifies the process"
    },
    {
        id:11,
        name:'Mui', 
        describe:`<div class="markdown prose w-full break-words dark:prose-invert light"><p>Mui, also known as Material-UI, is a popular open-source React component library that implements the Material Design guidelines developed by Google. It provides a comprehensive set of reusable UI components, styling options, and utility functions to build modern and visually appealing web applications.</p><p>Here are key features and concepts of Mui:</p><ol><li><p>Material Design: Mui follows the principles and guidelines of Material Design, a design language developed by Google. It incorporates concepts like elevation, responsive layouts, and meaningful animations to create a visually appealing and consistent user interface.</p></li><li><p>React Components: Mui offers a wide range of pre-built React components that cover various UI elements and functionality. These components include buttons, forms, navigation menus, cards, dialogs, tooltips, sliders, tables, and many more. They are designed to be highly customizable and can be easily integrated into React projects.</p></li><li><p>Theming and Styling: Mui provides a theming system that allows developers to customize the visual appearance of the components to match their application's branding and design requirements. The theming system uses the Material-UI's styling solution, which is based on CSS-in-JS. It enables the use of inline styles or external style sheets and supports various customization options.</p></li><li><p>Grid System: Mui includes a flexible grid system that helps create responsive layouts. The grid system is based on a 12-column layout similar to other popular frameworks like Bootstrap. It allows developers to easily arrange and align components on different screen sizes and provides responsive breakpoints for optimal viewing on various devices.</p></li><li><p>Accessibility: Mui places a strong emphasis on accessibility, ensuring that the components are usable and accessible to all users, including those with disabilities. It follows the best practices and guidelines for creating accessible web applications, such as proper keyboard navigation, semantic markup, and ARIA attributes.</p></li><li><p>Integration and Ecosystem: Mui integrates well with other popular libraries and frameworks in the React ecosystem. It can be used alongside React Router for handling navigation, Redux for state management, and other tools for testing and development. Additionally, Mui has a thriving community that contributes to its ecosystem by creating additional themes, extensions, and plugins.</p></li><li><p>Documentation and Community: Mui provides comprehensive documentation, examples, and demos to help developers get started quickly and understand how to use the components effectively. It has an active and supportive community where developers can seek help, share knowledge, and contribute to the library.</p></li></ol><p>Mui is a versatile and powerful UI component library for React applications. It enables developers to build modern and responsive user interfaces with ease, while following the principles of Material Design. Its flexibility, customization options, and active community make it a popular choice for developers working on React projects.</p></div>`, 
        image:muiLogo,
        describeoneline:"Mui, also known as Material-UI, is a popular open-source"
    },
];

const services = [
    {
        title:'Reactjs Application development', 
        description:"React.js is a JavaScript library used for building user interfaces and developing web applications. It allows developers to create reusable UI components and efficiently manage the application state. React.js follows a component-based architecture, where the user interface is divided into independent and reusable components that can be composed together to form complex UIs. It utilizes a virtual DOM (Document Object Model) for efficient rendering and updates only the necessary components when the application state changes, resulting in faster and more responsive applications. React.js also provides a unidirectional data flow and supports declarative programming, making it easier to understand and maintain the code. With its strong ecosystem and community support, React.js has become a popular choice for developing dynamic and interactive web applications",
        short:"React.js is a JavaScript library used for building user interfaces and developing web applications.",
    },
    {
        title:'PSD, Figma, XD To HTML',
        description:` <div><p>Converting PSD (Photoshop), Figma, or XD designs to HTML involves transforming the static design files into a fully functional and interactive web page. This process typically involves several steps:</p><ol><li><p>Design Analysis: The PSD, Figma, or XD design is carefully examined to understand its layout, elements, and interactions.</p></li><li><p>HTML Structure: The design is translated into HTML markup, where the different sections, elements, and components are identified and structured using HTML tags.</p></li><li><p>CSS Styling: The visual styles, such as colors, typography, spacing, and effects, defined in the design are implemented using CSS (Cascading Style Sheets). CSS is used to control the appearance and layout of the HTML elements.</p></li><li><p>Responsive Design: If the design is intended to be responsive, CSS media queries are used to adapt the layout and styles based on different screen sizes and devices.</p></li><li><p>Image Slicing and Optimization: Images from the design are sliced and exported as separate image files. They are then optimized for web use to reduce file size and improve loading speed.</p></li><li><p>Interactivity and Animation: If the design includes interactive elements or animations, JavaScript is used to add functionality and create dynamic effects.</p></li><li><p>Cross-Browser Compatibility: The HTML and CSS code is tested on multiple web browsers to ensure consistent rendering and functionality across different platforms.</p></li><li><p>Testing and Debugging: The converted HTML is thoroughly tested to identify and fix any issues, such as broken links, alignment problems, or performance bottlenecks.</p></li><li><p>Integration and Deployment: The finalized HTML code can be integrated into a content management system (CMS) or deployed directly to a web server to make the website live and accessible on the internet.</p></li></ol><p>It's important to note that the process may vary depending on the complexity of the design and the specific tools and techniques used by the developer or development team. The goal is to accurately translate the visual design into a functional and visually appealing web page while maintaining cross-browser compatibility and optimal performance.</p></div>`,
        short:"Converting PSD (Photoshop), Figma, or XD designs to HTML involves transforming the static design files into a fully functional and interactive web page"
    },
    {
        title:'PSD Figma, XD To wordpress', 
        description:` <div><p>Converting PSD (Photoshop), Figma, or XD designs to WordPress involves transforming the static design files into a fully functional and dynamic website powered by the WordPress content management system (CMS). Here are the general steps involved:</p><ol><li><p>Design Analysis: The PSD, Figma, or XD design is carefully analyzed to understand its layout, components, and functionalities.</p></li><li><p>HTML/CSS Conversion: The design is translated into HTML markup and CSS styles. The HTML structure is created to represent the different sections, elements, and components of the design.</p></li><li><p>WordPress Theme Creation: A WordPress theme is created based on the HTML/CSS code. This involves breaking the HTML into template files and integrating it into a WordPress theme structure. The theme files include the necessary PHP code to enable WordPress functionality and dynamic content management.</p></li><li><p>WordPress Customization: WordPress-specific features, such as custom post types, custom fields, menus, widgets, and theme options, are integrated into the theme. These features enhance the flexibility and functionality of the website, allowing content to be managed easily through the WordPress dashboard.</p></li><li><p>Content Integration: The static content from the design, such as text, images, and videos, is integrated into the WordPress theme. This involves creating and populating the necessary WordPress pages, posts, and custom content types to match the design.</p></li><li><p>Responsiveness and Cross-Browser Compatibility: The WordPress theme is made responsive by implementing CSS media queries and ensuring that the website adapts well to different screen sizes and devices. The theme is also tested on multiple web browsers to ensure consistent rendering and functionality across various platforms.</p></li><li><p>Functionality and Plugins: Additional functionality required by the design, such as sliders, contact forms, social media integration, or e-commerce capabilities, is implemented using WordPress plugins or custom development. These plugins extend the functionality of the website and enhance user experience.</p></li><li><p>Testing and Debugging: The WordPress website is thoroughly tested to identify and fix any issues, such as broken links, layout problems, or compatibility conflicts. This ensures that the website functions as intended and provides a smooth user experience.</p></li><li><p>Deployment: The finalized WordPress theme is deployed to a WordPress hosting environment. The necessary configurations, database setup, and domain mapping are performed to make the website live and accessible on the internet.</p></li></ol><p>The process may vary depending on the complexity of the design and the specific requirements of the WordPress website. Converting PSD, Figma, or XD designs to WordPress allows for a dynamic and easily manageable website, leveraging the power and flexibility of the WordPress CMS.</p></div>`,
        short:"Converting PSD (Photoshop), Figma, or XD designs to WordPress involves transforming the static design files"
    },
]

export const jsonData = {
    profile:{
        firstName:'MOHD', 
        lastName:"MIRAJ",
        jobTitle:'Frontend developer',
        expericence:5,
        expericenceDescritpion:"Years of Experinse in Frontend web development",
        numberOfProject:35,
        projectDescription:"Projects Worked in my career",
        email:'mohdmiraj143@gmail.com',
        phone:'+918054728743'
    },
    skills:skills,
    projects:[
        {
            name:"Cartobike", 
            description:"loren",
            technologies:[
                skills[0],
                skills[1],
                skills[2],
                skills[3],
                skills[4],
                skills[5],
                skills[6],
            ]
        }
    ],
    services:services
}